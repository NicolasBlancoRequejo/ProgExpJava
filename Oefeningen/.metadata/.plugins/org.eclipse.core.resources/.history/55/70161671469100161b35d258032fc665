package be._Testing_of_Multi_threaded;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.*;
import java.util.List;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * Unit test for simple App.
 */
public class AppTest extends TestCase {
	public void testParallelInsertionAndConsumption() throws InterruptedException, ExecutionException{
    	final BlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();
    	ExecuterService threadPool = Executors.newFixedThreadPool(NUM_THREADS);
    	final CountDownLatch latch = new CountDownLatch(NUM_THREADS);
    	List<Future<Integer>> futurePut = new ArrayList<Future<Integer>>();
    	for (int i = 0; i < 3; i++){
    		Future<Integer> submit = threadPool.submit(new Callable<Integer>() {
    			public Integer call(){
    				int sum = 0;
    				try {
    					   for (int i = 0; i < 10000; i++) {
    						   int nextInt = ThreadLocalRandom.current().nextInt(100);
    						   queue.put(nextInt);
    						   sum += nextInt;
    					   }
    				   } catch (InterruptedException e) {
    					   System.out.println("Interrupted exception occured! " + e.getMessage());
    				   }
    				   latch.countDown();
    				   return sum;
    			   }
    			});
    			futurePut.add(submit);
    	}
    	List<Future<Integer>> futureGet = new ArrayList<Future<Integer>>();
    	for (int i = 0; i < 3; i++) {
    		Future<Integer> submit = threadPool.submit(new Callable<Integer>() {
    			public Integer call() {
    				int count = 0;
    				try {
    					for (int i = 0; i < 10000; i++) {
    						Integer out = queue.take();
			}
		} catch (Exception e) {
			System.out.println("Exception occured! " + e.getMessage());
		}
	}

	});

	public void testApp() {
		assertTrue(true);
	}
}
